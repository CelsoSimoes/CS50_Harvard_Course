Começando com Bancos de Dados:
Abordaremos bancos de dados relacionais, para guardar, manipular e usar efetivamente esses dados.

Tipos de Dados:
inteiros/Decimal: numeros
Serial: como os inteiros, mas o serial conta automaticamente. Aumenta seu valor de forma automatica.
Varchar: Armazena strings, letras etc.
focaremos mais nesses 4 iniciais, porem existem outrso claro:
TimeStamp, Boolean, Enum, etc...

Podemos rrodar servidores Postgree tanto localmente na nossa maquina quanto em servidores online.
No proximo projeto trabalharemos com um banco de dados Postgree online, chamado 'hiroki'
Usaremos o comando 'psql' __url_do_servidor__ online para acessar nosso banco de dados no projeto 1

Constraints/Restricoes:
NOT NULL - A coluna precisa ter um valor
UNIQUE - A coluna nao e compartilhada entre duas pessoas, os valores presentes nela sao unicos
PRIMARY KEY - Define a chave primaria da tabela
DEFAULT - Posso atribuir a coluna um valor pre-determinado. Se não adicionado nada nela diretamente, ela ja possuira um valor
CHECK - Semelhante a um condicional: So quero adicionar valores que são maiores que 50 e menores que 100 por exemplo

INSERT INTO - Comando para inserir dados numa tabela

SELECT - É o comando utilizado para recuperar dados armazenado num banco de Dados
SELECT * - Retorna tudo na tabela
SELECT nome_da_coluna, outra_coluna - Seleciona as coluans como conhecemos
(Varios destes conteudos ja sao conhecidos, pois ja fiz a materia de Banco de Dados na graduacao)
FROM __nome__ - Tabela ao qual quero recuperara informacao
WHERE __condicao__ - E especificada uma condicao simples do que quero recuperar
Posso usar valores Booleanos (AND, OR, ...) e lógicos ('>', '<', '!=', ...) para trabalhar com minhar querys também, obtendo dados cada vez mais especificos e sofisticados/ filtrados
SELECT AVG(__nome__) - Retorna a media da coluna __nome__
SELECT AVG(x) as Tempo_medio - Retorna a media com a coluna tendo agora o nome Tempo_medio
SELECT COUNT(x) - Conta a quantidade de linhas da coluna x, ou de todas as colunas ('*')
SELECT MIN(x) - Seleciona o valor minimo de tal coluna
SELECT MAX(x) - Seleciona o valor maximo de tal coluna
SELECT ___...___ IN - Seleciona os dados que estejam dentro de outro range(funcoes, tabelas, outra selecao, etc...).

UPDATE - Seleciona dados no banco, e os atualiza
DELETE - Deleta dados

LIMIT __Nº__ - Limita o numero de linhas que irao aparecer no resultado da consulta
ORDER BY __nome__ - Ondena a coluna de acordo com o parametro passado, inteiros por exemplo
ASC/DESC - Usado depois do order by, Apresenta a ordem Ascendente/Descendente de exibicao
GROUP BY - Une as linhas que um determinado valor que seja igual, ou seja, agrupa linhas com valores iguais
HAVING - é semelhante ao WHERE  mas é exclusivo do GROUP BY, usado para condicionar o resultado retornado tambem

Adminer.cs50.net - É o site que usaremos no projeto 1 para lidar com bancos de dados Postgree sql

REFERENCES - Aparentemente é usado para referenciar a tabela no qual utilizaremos a variavel que se relaciona com ela, por exemplo: passengers.voos_id = voos.id, então temos que usar o References na craicao da variavel no passengers
-- Att: serve para dar consistencia ao banco de dados, ao, por exemplo, impedir que a tabela de id seja deletada pois ela é referenciada em outra tabela, assim, para não virar uma bagunça, o sistema impede tal ação
JOIN - Usado para unir duas tabelas que se relacionam de alguma forma

Tipos de JOIN:
INNER JOIN - Padrao, utilizando quando escrevemos so JOIN; realiza a recuperacao dos dados que tiveram um 'match' perfeito
LEFT JOIN - Recupera todas as linhas da tabela a esquerda, mesmo que elas não tenham dado um 'match perfeito'
RIGTH JOIN - Recupera todas as linhas da tabela a direita da funcao, mesmo que elas não tenham dado um 'match perfeito'

Adicionar um INDEX a tabelas e bancos de dados pode tornar mais facil de se encontrar determinados dados/informacoes, porem existe um trade off nisso. Pois caso venhamos a ter de atualizar o banco, levara mais tempo, e também com o INDEX, mais espaço será ocupado
Exemplos de 'Nesting' no arquivo 'selects.sql'


Conceitos de seguranca:
Existem formas de recuperar dados de usuarios usando a linguagem SQL de forma maliciosa, como por exemplo colocar senha como '1' OR '1' = '1', que é verdade e retornará acesso
Por isso precisamos trabalhar com formas de proteger tais dados sensiveis desse possiveis atos. Isso é chamado SQL Injection
Race Conditions - Duas pessoas acessando a mesma tabela, ao mesmo tempo, podem ser prejudicial a segurança do sistema, no caso de informacoes sensiveis;
nesse aspecto entra o conceito de SQL Transctions, no qual, quando um usuario acessa uma tabela/linha/conta/ essa mesma, é então bloqueada no momento da transacao, ela tem um 'Lock'.
E somente após o usuario 1 concluir o processo com a conta, o usuario 2 poderá ter acesso.
SQL Alchemy - Biblioteca do Python, que conecta Python com SQL
